/* tslint:disable */
/* eslint-disable */
/**
 * Typescript-rest Test API
 * a description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface UserServiceCreateUserRequest {
    user: User;
}

export interface UserServiceGetUserRequest {
    id: number;
}

export interface UserServiceUpdateUserRequest {
    id: number;
    user: User;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async userServiceAllUsersRaw(): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async userServiceAllUsers(): Promise<Array<User>> {
        const response = await this.userServiceAllUsersRaw();
        return await response.value();
    }

    /**
     */
    async userServiceCreateUserRaw(requestParameters: UserServiceCreateUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling userServiceCreateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async userServiceCreateUser(user: User): Promise<object> {
        const response = await this.userServiceCreateUserRaw({ user: user });
        return await response.value();
    }

    /**
     */
    async userServiceGetUserRaw(requestParameters: UserServiceGetUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceGetUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userServiceGetUser(id: number): Promise<User> {
        const response = await this.userServiceGetUserRaw({ id: id });
        return await response.value();
    }

    /**
     */
    async userServiceUpdateUserRaw(requestParameters: UserServiceUpdateUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceUpdateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling userServiceUpdateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async userServiceUpdateUser(id: number, user: User): Promise<object> {
        const response = await this.userServiceUpdateUserRaw({ id: id, user: user });
        return await response.value();
    }

}
